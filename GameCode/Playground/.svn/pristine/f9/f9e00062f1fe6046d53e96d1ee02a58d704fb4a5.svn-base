
class CharacterController : GameComponent
{
	// ** Engine Hooks ** //

	private void onParams(const Param &in params) override
	{
	}



	private void onStart() override
	{
		// Hold mouse
		getOwner().getInput().setHoldMouse(true);

		// Check if transform component is present.
		{
			TransformComponent @transform = getOwner().getComponent("Transform");

			if(transform is null)
			{
				Util::LogError("CharacterController: Transform not found.");
			}
		}
	}



	private void onThink(const float dt) override
	{
		TransformComponent @transform 	= getOwner().getComponent("Transform");
		Input @input 					= getOwner().getInput();

		if(transform !is null)
		{
			// Rotation
			{
				const float dx = input.getMouseDeltaX();

				Math::Vec3 rot = transform.getRotation();
				rot.z = rot.z + (dx * dt);

				transform.setRotation(rot);
			}

			//Position
			{
				// W,A,S,D movement
				Math::Vec3 move = { 0.f, 0.f, 0.f };
				{
					const float moveSpeed = 10.f * dt;

					if(input.isDown(Input::KB_W)) { move.z += moveSpeed; }
					if(input.isDown(Input::KB_S)) { move.z -= moveSpeed; }
					if(input.isDown(Input::KB_A)) {	move.x += moveSpeed; }
					if(input.isDown(Input::KB_D)) { move.x -= moveSpeed; }
				}

				// Calculate move position
				if(move.length() > 0.1f)
				{
					const Math::Vec3 forward		= transform.getForwardVec();
					const Math::Vec3 fwdMovement	= forward.scale(move.z);

					Util::LogInfo(Util::ToString(forward));

					const Math::Vec3 right			= transform.getRightVec();
					const Math::Vec3 rightMovement	= right.scale(move.x);

					const Math::Vec3 movement		= fwdMovement; //fwdMovement.subtract(rightMovement);

					const Math::Vec3 position		= transform.getPosition();
					const Math::Vec3 moveTo			= position.add(movement);
					
					transform.setPosition(moveTo);
				}
			} //Position
		}
	} // onThink(...)

	// ** Member Vars ** //


};
