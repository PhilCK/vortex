
/*
	CameraGameModel
	--
	The general movement of game camera.
	It will 'lazily' move to target position.
*/
class CameraGameModel : GameComponent
{
	// ** Model Getters ** //

	Math::Vec3 	getTargetPosition() const 	{ return m_targetPosition;  	}
	float 		getChangeRate() const 		{ return m_changeRateParam; 	}



	// ** Model Setters ** //

	void setTargetPosition(const Math::Vec3 &in target) { m_targetPosition = target; 		}
	void setChangeRate(const float changeRate)  		{ m_changeRateParam = changeRate; 	}



	// ** Engine Hooks ** //
	
	private void onStart() override
	{
		// Get/Set the camera component
		{
			// Set the camera up.
			if(getCameraComponent() !is null)
			{
				getCameraComponent().makeActiveCamera();
				getCameraComponent().setPosition(m_targetPosition);

				Math::Vec3 lookat = {0.f, 0.f, 0.f};
				getCameraComponent().setLookAt(lookat);
			}
		}
	}



	private void onParams(const Param &in params) override
	{
		m_changeRateParam = params["change_rate"].asFloat(m_changeRateParam);
	}



	private void onLateThink(const float dt) override
	{
		// Update current position ** Can be overriden by controller by setting changeRatepParam to zero.
		{
			/*const*/ Math::Vec3 direction = m_targetPosition.subtract(m_currentPosition);

			if(direction.length() != 0)
			{
				const float scale = dt * -m_changeRateParam;

				/*const*/ Math::Vec3 normDirection 	= direction.normalize();
				/*const*/ Math::Vec3 distance 		= normDirection.scale(scale);
				/*const*/ Math::Vec3 newPosition 	= m_currentPosition.add(distance);
				newPosition.z = 55.f;
				Print(newPosition.x);

				getCameraComponent().setPosition(newPosition);

				m_currentPosition = newPosition;
			}
		}
	}



	// ** Comp Helpers ** //

	private CameraComponent@ getCameraComponent()
	{
		if(m_cameraComponent is null)
		{
			@m_cameraComponent = @getOwner().getComponent("Camera");

			if(m_cameraComponent is null)
			{
				Print("CameraGameModel: Failed to find camera");
				return null;
			}
		}

		return m_cameraComponent;
	}



	// ** Member Vars ** //

	private float 						m_changeRateParam  = 30.0f;

	private Math::Vec3 					m_targetPosition   = {0.f, 0.f, 55.f};
	private Math::Vec3 					m_currentPosition  = {0.f, 0.f, 55.f};
	private CameraComponent 			@m_cameraComponent = null;
};
