/*@
	## Description
	
	Will make a duplicate of the object, and then it will scale upto the correct size.


	## Params

	- divisions - The amount of divisions the object is able to create.
	- scale_speed - The speed in which the object will scale up if was created by this class.


	## Events
	
	- CellDivideStart [ID : uint, Position : vec3] - When a cell divide has started.
	- CellDivideFinished [ID : uint] - When the cell divide has ended.
*/



// ** Event Indexes ** //

enum CellDivideStart 		{ OBJ_ID, POSITION, };
enum CellDivideFinished 	{ OBJ_ID, };



// ** Model State ** //

enum CellDivideState { NOTHING, DIVIDING, };



// ** Model Impl ** //

class CellDivide : GameComponent
{
	// ** Component Interface ** //

	bool hasDivided() const		{ return m_timesDivided != 0; 						}
	bool canDivide() const 		{ return m_timesDivided < m_numberOfDivisionsParam; }



	bool tryDivide()
	{
		if(!canDivide())
		{
			return false;
		}

		// Spawn the same entity near by.
		Entity @entity = getOwner().getState().pushNewEntity(getOwner().getName());

		if(entity !is null)
		{
			// Send the spawn cell divide message to the object.
			{
				
			}

			return true;
		}

		return false;
	}



	void setSpawnFromDivide()
	{
		m_state = CellDivideState::DIVIDING;

		// Fire Start Event
		{
			
		}
	}



	// ** Engine Hooks ** //

	private void onParams(const Param &in params) override
	{
		m_numberOfDivisionsParam 	= params["divisions"].asUInt(m_numberOfDivisionsParam);
		m_scaleSpeedParam 			= params["scale_speed"].asFloat(m_scaleSpeedParam);
	}



	private void onThink(const float dt) override
	{
		switch(m_state)
		{
			case(CellDivideState::DIVIDING):
			{
				m_currentScale += (m_scaleSpeedParam * dt);
				m_currentScale  = Math::Min(m_endScale, m_currentScale);

				if(m_currentScale >= m_endScale)
				{
					m_state = CellDivideState::NOTHING;

					// Fire End event
					{

					}
				}
			}
		}
	}



	// ** Member Vars ** //

	private uint 				m_numberOfDivisionsParam 	= 1;
	private float 				m_scaleSpeedParam			= 1.f;

	private uint 				m_timesDivided  			= 0;
	private CellDivideState		m_state 					= CellDivideState::NOTHING;
	private float 				m_startScale 				= 0.f;
	private float 				m_endScale 					= 1.f;
	private float 				m_currentScale				= 0.f;
};
