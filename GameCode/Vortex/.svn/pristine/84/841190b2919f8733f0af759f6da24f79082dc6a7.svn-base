
/*
	WeaponSystem
	--
	This is basically a countdown and spawner.
	It will try and create the entity with the given name,
	and not allow you to create another entity until the cool down has been reached.
*/

// ** Event Indexes ** //

enum WeaponFiredEvent		{ OBJ_ID, PROJECTILE_OBJ_ID, POSITION, };
enum WeaponCooledDownEvent 	{ OBJ_ID, };



class WeaponSystem : GameComponent
{
	// ** Setters ** //

	bool fireWeapon(const bool fireDown = true)
	{
		if(m_reloadTimer > 0)
		{
			Print("Reloading");
			return false;
		}

		Print("Fire");
		//getOwner().getState().pushNewEntity(m_projectileEntityNameParam);
		getOwner().getState().pushNewEntity("Player");

		// Fire weapon.
		// TODO: create entity.

		m_reloadTimer = m_reloadSpeedParam;
		m_hasReloaded = false;

		return true;
	}

	float getTimeTillReload() const 	{ return m_reloadTimer; 		}
	float getReloadTime() const 		{ return m_reloadSpeedParam; 	}



	// ** Engine Hooks ** //

	private void onParams(const Param &in params) override
	{
		m_reloadSpeedParam 			= params["reload_speed"].asFloat(m_reloadSpeedParam);
		m_projectileEntityNameParam = params["projectile_name"].asString(m_projectileEntityNameParam);
	}



	private void onStart() override
	{

	}



	private void onThink(const float dt) override
	{
		m_reloadTimer = Math::Max(0, m_reloadTimer - dt);

		// Reloaded event
		if(m_reloadTimer == 0 && !m_hasReloaded)
		{
			const string eventName 	= "WeaponCooledDown";
			const uint   eventID  	= getOwner().getEventManager().getEventID(eventName);

			EventArg argObjID(getOwner().getID());
			
			getOwner().getEventManager().sendInstantEvent(eventID, argObjID);

			m_hasReloaded = true;;
		}
	}	



	// ** Member Vars ** //

	private float 				m_reloadSpeedParam 				= 0.5f;
	private string 				m_projectileEntityNameParam 	= "Bullet";

	private float 				m_reloadTimer					= 0.f;
	private bool 				m_hasReloaded 					= true;

};
