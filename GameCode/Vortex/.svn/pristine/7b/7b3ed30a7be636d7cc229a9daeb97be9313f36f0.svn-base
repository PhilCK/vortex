
/*@
	## Description
	
	Giving an angle and depth, this will translate that into a 3D position.
	Use this for anything that uses the vortex.


	## Params

	- vortex_radius - Radius of the vortex for an object.
	- vortex_angle - Angle on the vortex (Radians).
	- tilt - Angle of the object on the vortex.
	- vortex_depth - How far down the vortex.
	- far_death_zone - Will destroy the object when it gets here.
	- near_death_zone - Will destroy the object when it gets here.
	- scale - Scale of the vortex.


	## Issues
	
	- Two independent ways of setting the angle (angle/tilt), this is superflous.
*/


class VortexTransform : GameComponent
{
	// ** Component Interface ** //

	float getAngle() const 							{ return m_vortexAngleParam;  		}
	void  setAngle(const float angle) 				{ m_vortexAngleParam = angle; 		}

	float getTilt() const 							{ return m_tiltParam; 				}
	void  setTilt(const float tilt) 				{ m_tiltParam = tilt; 				}
	
	float getDepth() const 							{ return m_vortexDepthParam;  		}
	void  setDepth(const float depth) 				{ m_vortexDepthParam = depth; 		}
	
	float getFarDeathZone() const 					{ return m_farDeathZoneParam; 		}
	void  setFarDeathZone(const float deadZone)		{ m_farDeathZoneParam = deadZone; 	}
	
	float getNearDeathZone() const 					{ return m_nearDeathZoneParam; 		}
	void  setNearDeathZone(const float deadZone)	{ m_nearDeathZoneParam = deadZone; 	}
	
	float getFarSpawnZone() const 					{ return m_farSpawnZoneParam; 		}
	void  setFarSpawnZone(const float farSpawn) 	{ m_farSpawnZoneParam = farSpawn; 	}
	
	float getNearSpawnZone() const 					{ return m_nearSpawnZoneParam; 		}
	void  setNearSpawnZone(const float nearSpawn) 	{ m_nearSpawnZoneParam = nearSpawn;	}
	
	float getScale() const 							{ return m_scaleParam.x;			}
	void  setScale(const float scale)
	{
		m_scaleParam.x = scale; m_scaleParam.y = scale; m_scaleParam.z = scale;

		Print(scale);

		getTransform().setScale(m_scaleParam);
	}
	


	Math::Vec3 getPosition() const
	{
		const float x = Math::Cos(m_vortexAngleParam) * m_vortexRadiusParam;
		const float y = Math::Sin(m_vortexAngleParam) * m_vortexRadiusParam;

		const Math::Vec3 position = { x, y, m_vortexDepthParam };

		return position;
	}



	void setPosition(const Math::Vec3 &in position)
	{
		const float centerX = 0.f;
		const float centerY = 0.f;

		const float dx = position.x - centerX;
		const float dy = position.y - centerY;

		const float angle = Math::ATan2(dy, dx);

		setAngle(angle);
		setDepth(position.z);
	}



	// ** Engine Hooks ** //

	private void onParams(const Param &in params) override
	{
		m_vortexRadiusParam   = params["vortex_radius"].asFloat(m_vortexRadiusParam);
		m_vortexAngleParam    = params["vortex_angle"].asFloat(m_vortexAngleParam);
		m_tiltParam 		  = params["tilt"].asFloat(m_tiltParam);
		m_vortexDepthParam    = params["vortex_depth"].asFloat(m_vortexDepthParam);
		m_farDeathZoneParam   = params["far_death_zone"].asFloat(m_farDeathZoneParam);
		m_nearDeathZoneParam  = params["near_death_zone"].asFloat(m_nearDeathZoneParam);
		m_farSpawnZoneParam   = params["far_spawn_zone"].asFloat(m_farSpawnZoneParam);
		m_scaleParam 		  = params["scale"].asVec3(m_scaleParam);
	}



	private void onAttach() override
	{
		getOwner().addComponent("Transform");
	}	

		

	private void onStart() override
	{
		// Check required components exist.
		getTransform();

		getTransform().setScale(m_scaleParam);

		// TODO: This is a hack to make sure the object isn't spawing in the middle of the level.
		Math::Vec3 position = getPosition();
		position.z = 1000;
		getTransform().setWorldPosition(position);
	}

	

	private void onLateThink(const float dt) override
	{
		getTransform().setWorldPosition(getPosition());

		// TODO: Does this belong here? this might be better off inside object controllers.
		const Math::Vec3 rotation = {0.f, 0.f, getTilt() + getAngle() + Math::QuartTau()};
		getTransform().setRotation(rotation);

		// Are we out of the vortex?
		{
			const Math::Vec3 position = getPosition();

			if(position.z > m_nearDeathZoneParam || position.z < m_farDeathZoneParam)
			{
				getOwner().destroy();
			}
		}
	}



	// ** Comp Helpers ** //

	private TransformComponent@ getTransform()
	{
		if(m_transform is null)
		{
			@m_transform = @getOwner().getComponent("Transform");

			// Failed to find.
			if(m_transform is null)
			{
				getOwner().addComponent("Transform");
				@m_transform = @getOwner().getComponent("Transform");

				// Failed to add.
				if(m_transform is null)
				{
					Print("VortexTransform: Couldn't find or add transform component.");
					return null;
				}
			}
		}

		return m_transform;
	}



	// ** Member Vars ** //

	private float 			m_vortexRadiusParam   = 6.0f;
	private float 			m_vortexAngleParam    = 0.f;
	private float 			m_tiltParam 		  = 0.f;
	private float 			m_vortexDepthParam    = 0.f;
	private float 			m_farDeathZoneParam   = -20.f;
	private float 			m_farSpawnZoneParam   = -19.f;
	private float 			m_nearDeathZoneParam  = 30.f;
	private float 			m_nearSpawnZoneParam  = 10.f;
	private Math::Vec3 		m_scaleParam		  = {0.7f, 0.7f, 0.7f};

	TransformComponent 		@m_transform 		  = null;
};
