

class ShipPlayerController : GameComponent
{
	// ** Engine Hooks ** //

	private void onParams(const Param &in params) override
	{
		m_turnForceParam = params["turn_force"].asFloat(m_turnForceParam);
		m_jumpForceParam = params["jump_force"].asFloat(m_jumpForceParam);
	}


	private void onStart() override
	{
		// Check required components exist.
		getModel();
		getVortexTransform();
	}


	private void onThink(const float dt) override
	{
		// Player input.
		{
			Input @input = getOwner().getInput();

			const float moveSpeed = m_turnForceParam * dt;

			// Move anti-clockwise
			if(input.isDown(Key::KB_A))
			{
				const float angle = getVortexTransform().getAngle() + moveSpeed;
				getVortexTransform().setAngle(angle);
			}
			// Move clockwise
			if(input.isDown(Key::KB_D))
			{
				const float angle = getVortexTransform().getAngle() - moveSpeed;
				getVortexTransform().setAngle(angle);	
			}
		}
	}



	// ** Comp Helpers ** //

	private ShipModel@ getModel()
	{
		// Try and get if it isn't there.
		if(m_model is null)
		{
			@m_model = @getOwner().getComponent("ShipModel");
			
			if(m_model is null)
			{
				Print("ShipPlayerController: Failed to find model.");
				return null;
			}
		}

		return m_model;
	}


	private VortexTransform@ getVortexTransform()
	{
		if(m_vortexTransform is null)
		{
			@m_vortexTransform = @getOwner().getComponent("VortexTransform");

			if(m_vortexTransform is null)
			{
				Print("ShipPlayerController: Failed to find vortex-transform");
				return null;
			}
		}

		return m_vortexTransform;
	}



	// ** Member Vars ** //

	private float				m_turnForceParam 	= 0.7f;
	private float 				m_jumpForceParam 	= 10.f;

	private ShipModel 			@m_model 			= null;
	private VortexTransform 	@m_vortexTransform 	= null;


};
