
/*
	ShipEnemyController
	--
	Enemy ship controller is AI logic for enemy ships.
*/
class ShipEnemyController : GameComponent
{
	// ** Engine Hooks ** //

	private void onParams(const Param &in params) override
	{
		m_turnForceParam = params["turn_force"].asFloat(m_turnForceParam);
		m_jumpForceParam = params["jump_force"].asFloat(m_jumpForceParam);
	}



	private void onStart() override
	{
		// Reg for events
		{
			registerForEvent(getOwner().getEventManager().getEventID("PlayerShipDead"));
		}

		// Check required components exist.
		{
			getModel();
			getWeaponSystem();
			getVortexTransform();
		}

		// Setup
		{
			getVortexTransform().setAngle(Math::RandFloatRange(0.f, Math::Tau()));
			getVortexTransform().setDepth(getVortexTransform().getFarDeathZone());
		}
	}



	private void onThink(const float dt) override
	{
		const float movement = 5.f * dt;

		getVortexTransform().setDepth(getVortexTransform().getDepth() + movement);

		// Random Fire weapon.
		{
			m_radomeFireTimer += dt;

			if(m_radomeFireTimer > m_randomFireWeapon)
			{
				getWeaponSystem().fireWeapon(getVortexTransform().getPosition(), true);
				m_radomeFireTimer = 0.f;
			}
		}		
	}



	private void onCollision(const CollidedWith &in collidedWith)
	{
		//collidedWith.entity.destroy();
		if(!collidedWith.entity.hasTag("enemy_projectile") && collidedWith.entity.hasTag("projectile"))
		{
			getOwner().destroy();
			collidedWith.entity.destroy();
		}
	}



	private bool onEvent(const Event @data) override
	{
		// player died
		const uint playerDiedID = getOwner().getEventManager().getEventID("PlayerShipDead");

		if(data.getID() == playerDiedID)
		{
			getModel().killShip();
		}
		
		return false;
	}



	// ** Comp Helpers ** //

	private ShipModel@ getModel()
	{
		// Try and get if it isn't there.
		if(m_model is null)
		{
			@m_model = @getOwner().getComponent("ShipModel");
			
			if(m_model is null)
			{
				Print("ShipPlayerController: Failed to find model.");
				return null;
			}
		}

		return m_model;
	}



	private VortexTransform@ getVortexTransform()
	{
		if(m_vortexTransform is null)
		{
			@m_vortexTransform = @getOwner().getComponent("VortexTransform");

			if(m_vortexTransform is null)
			{
				Print("ShipPlayerController: Failed to find vortex-transform.");
				return null;
			}
		}

		return m_vortexTransform;
	}



	private WeaponSystem@ getWeaponSystem()
	{
		if(m_weaponSystem is null)
		{
			@m_weaponSystem = @getOwner().getComponent("WeaponSystem");

			if(m_weaponSystem is null)
			{
				Print("ShipPlayerController: Failed to find weapon system.");
				return null;
			}
		}

		return m_weaponSystem;
	}



	// ** Member Vars ** //

	private float				m_turnForceParam 	= 0.7f;
	private float 				m_jumpForceParam 	= 0.5f;

	private ShipModel 			@m_model 			= null;
	private VortexTransform 	@m_vortexTransform 	= null;
	private WeaponSystem 		@m_weaponSystem 	= null;
	private float 				m_randomFireWeapon  = 2.0f;
	private float 				m_radomeFireTimer   = 0;


};
